;*********************************************************************
; util.asm 
; Author: Marcos José Brusso
; Version: 1.0.0
; Licensed under the MIT license (see "license.txt"). 
; Ported to Mac OSX (version 10.15.5 tested). 64 bits syscalls
;https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/
;https://www.tfzx.net/article/29772.html
;https://rudamoura.com/syscall.html
;https://opensource.apple.com/source/xnu/xnu-1504.9.37/bsd/kern/syscalls.master
;*********************************************************************

section .text
global	exit, endl, strlen, printstr, readstr, printint, readint	; public symbols

;*********************************************************************
; _syscall
;
; Quit program
; Arguments: 
;		None
; Returns: 
; 		This function does not return
;*********************************************************************
_syscall:
	;int 0x80 ;
	syscall 
	ret

;*********************************************************************
; exit
;
; Quit program
; Arguments: 
;		None
; Returns: 
; 		This function does not return
;*********************************************************************
exit:
        mov		rax, 0x2000001                 ; rax: system call number (1=exit)
		mov		rdi,0						;retorna 0 para o sistema operacional
        call _syscall    				; system call
;*********************************************************************

;*********************************************************************
; endl
;
; prints a newline character
; Arguments: 
;		None
; Returns: 
;		Nothing
;*********************************************************************
endl:
	mov		rdi, util.endl
	call	printstr
	ret
   
;*********************************************************************

;*********************************************************************
; strlen
;
; Calculates the length of string s
; Arguments:
; 		rdi: address of a null-terminated string (array of chars terminated by 0)
; Returns:
;		rax: string size
;*********************************************************************
strlen:				
		xor		rax, rax			; rax=0			// reset count
.loop:								; do{
		cmp		byte [rdi], 0		;   if (*s==0)	// If zero, skip loop
		je		strlen.end			;     break
		inc		rax					;   rax++ 		// increment count
		inc		rdi					; 	s++ 		// advance to the next char
		jmp		strlen.loop			; }while(true)
.end:
		ret							; return rax
;*********************************************************************


;*********************************************************************
; printstr
;
; Print a string
; Arguments:
; 		edi: address of a null-terminated string (array of chars terminated by 0)
; Returns: 
;		Nothing
;*********************************************************************
printstr:
		push 	rdi			; save copy (rdi should be caller saved)
		call 	strlen
		pop     rdi		    ; string
		mov		rdx,rax			; tamanho da string
		mov		rsi,rdi			; endereço da string
		mov		rdi,1			; STDOUT (terminal)
		mov 	rax, 0x2000004		; syscall write=4
		call _syscall		;syscall
		;add		rsp,24		; rsp = rsp + 24 (esp = stack pointer)
		ret
;*********************************************************************


;*********************************************************************
; readstr
;
; Read up to max_size chars from standard input into a string.
; Arguments:
; 		edi: address of a string (array of chars)
; 		esi: max_size - limit input size
; Returns:
;		eax: the number of bytes read
;*********************************************************************
readstr:
		mov		rbx,rdi				;copia endereço dod buffer para ebx
		mov		rdx,rsi					;tamanho do buffer
		mov		rsi,rdi					;endereço de memória do buffer
		mov		rdi,0					; STDIN (terminal)
		mov		rax,0x2000003				; syscal read = 3
		call _syscall				;chamada sistema operacional
		;add		rsp,24				;restaura a pilha
		dec 	rax					; removing trailing newline char
		mov		byte [rbx+rax], 0	; replace with '\0'
		ret
;*********************************************************************
	


;*********************************************************************
; printint
;
; Print a integer number (decimal)
; Arguments:
; 		rdi: 	number (n)
; Returns: 
;		Nothing
;*********************************************************************
printint:
		mov		rax, rdi			; rax = n	
		xor 	rcx, rcx			; is_neg = false
		cmp 	rax, 0				;
		jge		printint.nn  		; if(n<0)	  
		not 	rcx					; 		is_neg = true
		neg 	rax					;     	n = -n
.nn:	
		mov 	rbx, 10				; ebx = 10
		mov 	rdi, util.temps+20	; char *p = &s[10]
.loop:								; do{
		xor 	rdx, rdx			;		rdx=0 
		div 	rbx					; 		rdx=rdx:rax%10; rax=rdx:rax/10
		add 	dl, '0'				;		decimal digit
		mov 	byte [rdi], dl		;		*p = digit in dl
		dec 	rdi					; 		p--
		cmp 	rax, 0				; 
		jg 		printint.loop		; }while (n>0)

		test 	rcx, rcx			; if(is_neg)
		jz		printint.notneg	;   	// Prepend minus sign	
		mov 	byte [rdi], '-'		; 		*p = '-'
		dec 	rdi					;		p--
.notneg:		
		inc 	rdi					; p++
		call 	printstr			; print number
		ret
;*********************************************************************	
	 
	

;*********************************************************************
; readint
;
; Read a int64 from standard input
; Arguments: 
;		None
; Returns:
;		rax: The value entered
;*********************************************************************
readint:
		mov 	rdi, util.temps				; temp string address	
		mov 	rsi, 20						; max input size
		call 	readstr						; read number as string
		lea		rsi, [rel util.temps]
		lea 	rdi, [rax+rsi-1]		; char *p = &s[strlen(string)];  //scans string backward
		xor 	rax, rax					; result value
		mov 	rdx, 1						; multiplier
.beginloop:		
		cmp		rdi, rsi				; while(p>=s){
		jl		readint.end					;
		xor		rcx, rcx					;	
		mov 	cl, byte [rdi] 				; 	 cl = current char
		cmp 	cl, '-'						;	 if(cl=='-')
		jne		readint.notneg				;
		neg		rax							;		rax=-rax
		jmp		readint.end					;
.notneg:					
		cmp		cl, '9'						;	 if(!isdigit(cl)) continue
		jg		readint.endloop				;
		sub		cl, '0'						;
		jl		readint.endloop				;
		imul	rcx, rdx					;	 digit_value = current_char * multiplier
		add		rax, rcx					;	 result += digit_value
		imul	rdx, 10						;	 multiplier *= 10
.endloop:
		dec		rdi							;	 previous char //scans string backward
		jmp		readint.beginloop			; }
.end:		
		ret

section	.data
    util.temps	db	'000000000000000000000',0    	; char util.temps[]="000000000000000000000"
    util.endl   db 	10,0							; char util.endl[]="\n"
